/* Generated By:JavaCC: Do not edit this line. PsyScriptParser.java */
package net.bramp.psyscript.parser;

import java.util.ArrayList;
import java.util.List;

import net.bramp.psyscript.*;
import net.bramp.psyscript.objects.*;
import net.bramp.psyscript.variables.*;
import net.bramp.psyscript.action.*;
import net.bramp.psyscript.action.gui.*;

public class PsyScriptParser implements PsyScriptParserConstants {

        Program p = new Program();

        private int getLine() {
                return token.next.beginLine;
        }

        // JavaCC hack for doing lexical state transitions syntactically
        private void SetState(int state) {
                if (state == token_source.curLexState)
                        return;

                Token root = new Token(), last=root;
                root.next = null;

                // First, we build a list of tokens to push back, in backwards order
                while (token.next != null) {
                        Token t = token;
                        // Find the token whose token.next is the last in the chain
                        while (t.next != null && t.next.next != null)
                                t = t.next;

                        // put it at the end of the new chain
                        last.next = t.next;
                        last = t.next;

                        // If there are special tokens, these go before the regular tokens,
                        // so we want to push them back onto the input stream in the order
                        // we find them along the specialToken chain.

                        if (t.next.specialToken != null) {
                                Token tt=t.next.specialToken;
                                while (tt != null) {
                                        last.next = tt;
                                        last = tt;
                                        tt.next = null;
                                        tt = tt.specialToken;
                                }
                        }
                        t.next = null;
                }

        if ( root.next != null ) {
                token_source.backup( root.next.endColumn - last.beginColumn + 1 );
        }

                //while (root.next != null) {
                //	token_source.backup(root.next.image.length());
                //	root.next = root.next.next;
                //}
                jj_ntk = -1;
                token_source.SwitchTo(state);
        }

/************************************************
 * THE GRAMMAR SPECIFICATION STARTS HERE *
 ************************************************/
  final public Program PsyScript() throws ParseException {
        Procedure proc;
        Table table;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROCEDURE:
        proc = Procedure();
                         p.add(proc);
        break;
      case TABLE:
        table = Table();
                         p.add(table);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TABLE:
      case PROCEDURE:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public Table Table() throws ParseException {
        final List<String> rows;
        final String name;
        boolean randomise = false;
    jj_consume_token(TABLE);
    name = Identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IN:
      jj_consume_token(IN);
      jj_consume_token(RANDOM);
      jj_consume_token(ORDER);
                                                          randomise = true;
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
          SetState( IN_TABLE );
    rows = TableRows();
          SetState( DEFAULT );
    jj_consume_token(END);
    jj_consume_token(TABLE);
          {if (true) return new Table(name, rows, randomise);}
    throw new Error("Missing return statement in function");
  }

  final public List<String> TableRows() throws ParseException {
        final List<String> rows = new ArrayList<String>();
        String s;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
      case NEWLINE:
      case CHARACTER:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
      case CHARACTER:
        s = TableRow();
                  if ( s.length() > 0 && !s.startsWith("--") ) rows.add(s);
        break;
      case NEWLINE:
        jj_consume_token(NEWLINE);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return rows;}
    throw new Error("Missing return statement in function");
  }

  final public String TableRow() throws ParseException {
        String s;
        final StringBuffer buf = new StringBuffer();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      label_3:
      while (true) {
        s = jj_consume_token(STRING).image;
                             buf.append(s);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
      }
      jj_consume_token(TABLE_STRING_END);
                  s = buf.toString();
      break;
    case CHARACTER:
      s = jj_consume_token(CHARACTER).image;
                               token_source.backup(s.length());
      s = String(IN_TABLE_STRING);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return s.trim();}
    throw new Error("Missing return statement in function");
  }

  final public Procedure Procedure() throws ParseException {
        final String name;
        final List<Action> commands;
        final int line = getLine();
    jj_consume_token(PROCEDURE);
    name = Identifier();
    commands = Commands();
    jj_consume_token(END);
    jj_consume_token(PROCEDURE);
    {if (true) return new Procedure(p, line, name, commands);}
    throw new Error("Missing return statement in function");
  }

  final public List<Action> Commands() throws ParseException {
 final List<Action> commands = new ArrayList<Action>();
 Action c;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABORT:
      case BACKGROUND:
      case CALL:
      case DISPLAY:
      case FLUSH:
      case HIDE:
      case IF:
      case LOAD:
      case LOG:
      case MOVE:
      case PAUSE:
      case PLAY:
      case REPEAT:
      case SET:
      case SHOW:
      case SKIP_:
      case START:
      case WAIT:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      c = Command();
         commands.add(c);
    }
          {if (true) return commands;}
    throw new Error("Missing return statement in function");
  }

  final public Action Command() throws ParseException {
        RGB colour;
        Variable v1;
        List<Variable> vs;
        List<Action> commands1, commands2 = null;
        Expression e1=null, e2=null, e3=null;
        Condition c1;
        Cells cells;
        Coordinate cord1, cord2 = null;
        ScreenObject o1;
        int line = getLine();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABORT:
      jj_consume_token(ABORT);
          {if (true) return new AbortAction(p, line);}
      break;
    case BACKGROUND:
      jj_consume_token(BACKGROUND);
      colour = Colour();
          {if (true) return new BackgroundAction(p, line, colour);}
      break;
    case CALL:
      jj_consume_token(CALL);
      e1 = IdentifierExpression();
          {if (true) return new CallAction(p, line, e1);}
      break;
    case DISPLAY:
     String textType = null;
      jj_consume_token(DISPLAY);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HTML:
      case PLAIN:
      case RICH:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLAIN:
          jj_consume_token(PLAIN);
                            textType="text/plain";
          break;
        case RICH:
          jj_consume_token(RICH);
                                                              textType="text/rtf";
          break;
        case HTML:
          jj_consume_token(HTML);
                                                                                              textType="text/html";
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(TEXT);
      jj_consume_token(FROM);
      jj_consume_token(FILE);
      e1 = StringExpression(IN_STRING);
          {if (true) return new DisplayTextAction(p, line, e1, textType);}
      break;
    case FLUSH:
      jj_consume_token(FLUSH);
      jj_consume_token(KEY);
      jj_consume_token(BUFFER);
          {if (true) return new FlushAction(p, line);}
      break;
    case HIDE:
      jj_consume_token(HIDE);
      o1 = ScreenObject();
          {if (true) return new HideAction(p, line, o1);}
      break;
    case IF:
      jj_consume_token(IF);
      c1 = Condition();
      commands1 = Commands();
          IfAction ifAction = new IfAction(p, line, c1, commands1); final IfAction firstIf = ifAction;
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_5;
        }
        jj_consume_token(ELSE);
        if (jj_2_1(2147483647)) {
                                               line = getLine();
          jj_consume_token(IF);
          c1 = Condition();
          commands2 = Commands();
                                  IfAction ifAction2 = new IfAction (p, line, c1, commands2 );
                                  ifAction.addElse( ifAction2 );
                                  ifAction = ifAction2;
        } else {
          commands2 = Commands();
                                  ifAction.addElse( commands2 );
        }
      }
      jj_consume_token(END);
      jj_consume_token(IF);
          {if (true) return firstIf;}
      break;
    case SHOW:
      jj_consume_token(SHOW);
      o1 = ScreenObject();
          {if (true) return new ShowAction(p, line, o1);}
      break;
    case LOAD:
      jj_consume_token(LOAD);
      jj_consume_token(IMAGE);
      e1 = StringExpression(IN_STRING_NO_INTO);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTO:
        jj_consume_token(INTO);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      cells = Cells();
      {if (true) return new LoadImageAction(p, line, e1, cells);}
      break;
    case LOG:
      jj_consume_token(LOG);
      e1 = StringExpression(IN_STRING);
          {if (true) return new LogAction(p, line, e1);}
      break;
    case MOVE:
      jj_consume_token(MOVE);
      o1 = ScreenObject();
      jj_consume_token(TO);
      cord1 = Coordinate();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WITHSIZE:
        jj_consume_token(WITHSIZE);
        jj_consume_token(SIZE);
        cord2 = Coordinate();
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
       {if (true) return new MoveAction(p, line, o1, cord1, cord2);}
      break;
    case PAUSE:
      jj_consume_token(PAUSE);
      jj_consume_token(FOR);
      e1 = FloatExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SECOND:
        jj_consume_token(SECOND);
        break;
      case SECONDS:
        jj_consume_token(SECONDS);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
       {if (true) return new WaitForAction(p, line, e1);}
      break;
    case PLAY:
      jj_consume_token(PLAY);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOVIE:
        jj_consume_token(MOVIE);
        e1 = StringExpression(IN_STRING_NO_AT);
        jj_consume_token(AT);
        cord1 = Coordinate();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WITHSIZE:
          jj_consume_token(WITHSIZE);
          jj_consume_token(SIZE);
          cord2 = Coordinate();
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WITHOUT:
          jj_consume_token(WITHOUT);
          jj_consume_token(WAITING);
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
                                  {if (true) throw new NotImplementedException("movie is not implemented yet!");}
        break;
      case SOUND:
        jj_consume_token(SOUND);
        e1 = StringExpression(IN_STRING_NO_WITHOUT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WITHOUT:
          jj_consume_token(WITHOUT);
          jj_consume_token(WAITING);
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
                                  {if (true) throw new NotImplementedException("sound is not implemented yet!");}
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case SET:
      jj_consume_token(SET);
      if (jj_2_2(2147483647)) {
        v1 = Variable();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BY:
          jj_consume_token(BY);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case APPEND:
            jj_consume_token(APPEND);
            e1 = StringExpression(IN_STRING);
                                          {if (true) return new AppendAction(p, line, v1, e1);}
            break;
          case REMOVE:
            jj_consume_token(REMOVE);
            e1 = StringExpression(IN_STRING);
                                          {if (true) return new RemoveAction(p, line, v1, e1);}
            break;
          default:
            jj_la1[18] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case TO:
          jj_consume_token(TO);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING_END:
          case STRING:
          case IDENTIFIER:
          case CHARACTER:
          case VARIABLE:
            e1 = Expression(IN_STRING);
                                          {if (true) return new SetAction(p, line, v1, e1);}
            break;
          case DURATION:
            jj_consume_token(DURATION);
            jj_consume_token(OF);
            jj_consume_token(MOVIE);
            e1 = StringExpression(IN_STRING);
                                          {if (true) throw new RuntimeException("Duration of is not implemented yet!");}
            break;
          default:
            jj_la1[19] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SLIDER:
          jj_consume_token(SLIDER);
          jj_consume_token(TO);
          e1 = FloatExpression();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OF:
            jj_consume_token(OF);
            e2 = FloatExpression();
            jj_consume_token(TO);
            e3 = FloatExpression();
            break;
          default:
            jj_la1[21] = jj_gen;
            ;
          }
                          {if (true) return new SetSliderAction(p, line, p.getSlider(), e1, e2, e3);}
          break;
        case TEXT:
          jj_consume_token(TEXT);
          jj_consume_token(FIELD);
          jj_consume_token(TO);
          e1 = StringExpression(IN_STRING);
                          {if (true) return new SetTextAction(p, line, p.getTextField(), e1);}
          break;
        case CELL:
        case CELLS:
        case IDENTIFIER:
          cells = Cells();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TO:
            jj_consume_token(TO);
            e1 = StringExpression(IN_STRING);
                                  {if (true) return new SetCellAction(p, line, cells, e1);}
            break;
          case FONT:
            jj_consume_token(FONT);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case TO:
              jj_consume_token(TO);
              break;
            default:
              jj_la1[22] = jj_gen;
              ;
            }
            e1 = StringExpression(IN_STRING_NO_SIZE);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SIZE:
              jj_consume_token(SIZE);
              e2 = IntExpression();
              break;
            default:
              jj_la1[23] = jj_gen;
              ;
            }
                                  {if (true) return new SetCellFontAction(p, line, cells, e1, e2 );}
            break;
          default:
            jj_la1[24] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case SKIP_:
      jj_consume_token(SKIP_);
      e1 = StringExpression(IN_STRING);
                  {if (true) throw new NotImplementedException("skip is not implemented yet!");}
      break;
    case START:
      jj_consume_token(START);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COUNTDOWN:
        jj_consume_token(COUNTDOWN);
        jj_consume_token(FROM);
        e1 = FloatExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SECOND:
          jj_consume_token(SECOND);
          break;
        case SECONDS:
          jj_consume_token(SECONDS);
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                          {if (true) return new StartCountdownAction(p, line, p.getVariable("$countdownStart"), p.getVariable("$countdownDuration"), e1);}
        break;
      case TIMER:
        jj_consume_token(TIMER);
                          {if (true) return new StartTimerAction(p, line, p.getVariable("$timerStart"));}
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case REPEAT:
      jj_consume_token(REPEAT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
        jj_consume_token(WHILE);
        c1 = Condition();
        commands1 = Commands();
        jj_consume_token(END);
        jj_consume_token(REPEAT);
                          {if (true) return new RepeatWhileAction(p, line, c1, commands1);}
        break;
      case UNTIL:
        jj_consume_token(UNTIL);
        c1 = Condition();
        commands1 = Commands();
        jj_consume_token(END);
        jj_consume_token(REPEAT);
                          {if (true) return new RepeatUntilAction(p, line, c1, commands1);}
        break;
      case USING:
        jj_consume_token(USING);
        vs = Variables();
        jj_consume_token(FROM);
        if (jj_2_3(2147483647)) {
          e1 = IntExpression();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ROW:
            jj_consume_token(ROW);
            break;
          case ROWS:
            jj_consume_token(ROWS);
            break;
          default:
            jj_la1[28] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(OF);
        } else {
          ;
        }
        e2 = IdentifierExpression();
        commands1 = Commands();
        jj_consume_token(END);
        jj_consume_token(REPEAT);
                                if ( e1 == null )
                                        {if (true) return new RepeatUsingTableAction(p, line, e2, vs, commands1);}
                                else
                                        {if (true) return new RepeatUsingTableAction(p, line, e2, e1, vs, commands1);}
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case WAIT:
      jj_consume_token(WAIT);
      jj_consume_token(FOR);
                  final WaitForAction wait = new WaitForAction(p, line);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_END:
      case INTEGER:
      case FLOAT:
      case CHARACTER:
      case VARIABLE:
        e1 = FloatExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SECOND:
          jj_consume_token(SECOND);
          break;
        case SECONDS:
          jj_consume_token(SECONDS);
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                 wait.setDuration(e1);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          jj_consume_token(OR);
          jj_consume_token(A);
          ClickOrKey(wait);
          break;
        default:
          jj_la1[31] = jj_gen;
          ;
        }
        break;
      case A:
        jj_consume_token(A);
        ClickOrKey(wait);
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  {if (true) return wait;}
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void ClickOrKey(final WaitForAction wait) throws ParseException {
        Cells cells;
        Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLICK:
      jj_consume_token(CLICK);
                    ClickEvent event1 = new ClickEvent(p.getVariable("$lastClick"), p.getVariable("$lastClickTime"));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
        jj_consume_token(IN);
        cells = Cells();
                                        event1.setFilter(cells);
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
                          wait.setEvent( event1 );
      break;
    case KEY:
      jj_consume_token(KEY);
                  KeyEvent event2 = new KeyEvent(p.getVariable("$lastKey"), p.getVariable("$lastKeyTime"));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
        jj_consume_token(IN);
        e = StringExpression(IN_STRING);
                                                     event2.setFilter(e);
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
                          wait.setEvent( event2 );
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Condition Condition() throws ParseException {
        final Expression e1, e2;
    e1 = StringExpression(IN_STRING_NO_IS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IS:
      jj_consume_token(IS);
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_END:
    case STRING:
    case IDENTIFIER:
    case CHARACTER:
    case VARIABLE:
      e2 = StringExpression(IN_STRING);
                 {if (true) return new ConditionIs(e1, e2);}
      break;
    case IN:
      jj_consume_token(IN);
      e2 = StringExpression(IN_STRING);
                 {if (true) return new ConditionIsIn(e1, e2);}
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public RGB Colour() throws ParseException {
        final Expression e1, e2, e3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      e1 = FloatExpression();
      jj_consume_token(COMMA);
      e2 = FloatExpression();
      jj_consume_token(COMMA);
      e3 = FloatExpression();
      jj_consume_token(RBRACKET);
                  {if (true) return new RGB(e1, e2, e3);}
      break;
    case STRING_END:
    case STRING:
    case IDENTIFIER:
    case CHARACTER:
    case VARIABLE:
      e1 = StringExpression(IN_STRING);
                  {if (true) return new RGB(e1);}
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Coordinate Coordinate() throws ParseException {
 final Expression e1, e2;
    jj_consume_token(LBRACKET);
    e1 = FloatExpression();
    jj_consume_token(COMMA);
    e2 = FloatExpression();
    jj_consume_token(RBRACKET);
          {if (true) return new Coordinate(e1, e2);}
    throw new Error("Missing return statement in function");
  }

  final public String String(int type) throws ParseException {
        String s;
        Token t;
        final StringBuffer buf = new StringBuffer();

        SetState(type);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      label_6:
      while (true) {
        s = jj_consume_token(STRING).image;
                             buf.append(s);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_6;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_END:
        jj_consume_token(STRING_END);
        break;
      case STRING_INTO_END:
        jj_consume_token(STRING_INTO_END);
        break;
      case STRING_IS_END:
        jj_consume_token(STRING_IS_END);
        break;
      case STRING_SYMBOL_END:
        jj_consume_token(STRING_SYMBOL_END);
        break;
      case STRING_SIZE_END:
        jj_consume_token(STRING_SIZE_END);
        break;
      case STRING_AT_END:
        jj_consume_token(STRING_AT_END);
        break;
      case STRING_WITHOUT_END:
        jj_consume_token(STRING_WITHOUT_END);
        break;
      case TABLE_STRING_END:
        jj_consume_token(TABLE_STRING_END);
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  s = buf.toString();
      break;
    case CHARACTER:
      s = jj_consume_token(CHARACTER).image;
                               token_source.backup(s.length());
      s = String(type);
      break;
    case IDENTIFIER:
      s = Identifier();
                          token_source.backup(s.length());
      s = String(type);
      break;
    case STRING_END:
      jj_consume_token(STRING_END);
                         s="";
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String IntString(int type) throws ParseException {
        String s;
        final StringBuffer buf = new StringBuffer();

        assert type == IN_FLOAT || type == IN_INTEGER;

        SetState(type);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      s = jj_consume_token(INTEGER).image;
      break;
    case FLOAT:
      s = jj_consume_token(FLOAT).image;
      break;
    case CHARACTER:
      s = jj_consume_token(CHARACTER).image;
                               token_source.backup(s.length()); s=IntString(type);
      break;
    case STRING_END:
      jj_consume_token(STRING_END);
                         s="";
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Expression Expression(int str_type) throws ParseException {
        final Variable v;
        final String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      v = Variable();
                  {if (true) return new VariableExpression(v);}
      break;
    case STRING_END:
    case STRING:
    case IDENTIFIER:
    case CHARACTER:
      s = String(str_type);
                  {if (true) return Expression.createExpression( s );}
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression IdentifierExpression() throws ParseException {
        final Variable v;
        final String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      v = Variable();
                  {if (true) return new VariableExpression(v);}
      break;
    case IDENTIFIER:
      s = Identifier();
                  {if (true) return new StringExpression( s );}
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression StringExpression(int str_type) throws ParseException {
        final Variable v;
        final String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      v = Variable();
                 {if (true) return new VariableExpression(v);}
      break;
    case STRING_END:
    case STRING:
    case IDENTIFIER:
    case CHARACTER:
      s = String(str_type);
                 {if (true) return new StringExpression(s);}
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression FloatExpression() throws ParseException {
        final Variable v;
        final String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      v = Variable();
                 {if (true) return new VariableExpression(v);}
      break;
    case STRING_END:
    case INTEGER:
    case FLOAT:
    case CHARACTER:
      s = IntString(IN_FLOAT);
                  {if (true) return new FloatExpression(s);}
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression IntExpression() throws ParseException {
        final Variable v;
        final String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      v = Variable();
                 {if (true) return new VariableExpression(v);}
      break;
    case STRING_END:
    case INTEGER:
    case FLOAT:
    case CHARACTER:
      s = IntString(IN_INTEGER);
                 {if (true) return new IntExpression(s);}
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List<Variable> Variables() throws ParseException {
        final List<Variable> vs = new ArrayList<Variable>();
        Variable v;
    v = Variable();
                       vs.add(v);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      v = Variable();
                            vs.add(v);
    }
          {if (true) return vs;}
    throw new Error("Missing return statement in function");
  }

  final public Variable Variable() throws ParseException {
        final String s;
    s = jj_consume_token(VARIABLE).image;
          {if (true) return p.getVariable(s);}
    throw new Error("Missing return statement in function");
  }

  final public String Identifier() throws ParseException {
        final String s;
    s = jj_consume_token(IDENTIFIER).image;
          {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public ScreenObject ScreenObject() throws ParseException {
        final Cell c;
        final Cells cs;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CELL:
    case CELLS:
    case IDENTIFIER:
      cs = Cells();
                  {if (true) return cs;}
      break;
    case CURSOR:
      jj_consume_token(CURSOR);
                  {if (true) return p.getCursor();}
      break;
    case SLIDER:
      jj_consume_token(SLIDER);
                  {if (true) return p.getSlider();}
      break;
    case TEXT:
      jj_consume_token(TEXT);
      jj_consume_token(FIELD);
                  {if (true) return p.getTextField();}
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Cells Cells() throws ParseException {
        final String s;
        final Variable v;
    if (jj_2_4(2147483647)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CELL:
        jj_consume_token(CELL);
        break;
      case CELLS:
        jj_consume_token(CELLS);
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      v = Variable();
                  {if (true) return new Cells(p, v);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CELL:
      case CELLS:
      case IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CELL:
        case CELLS:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CELL:
            jj_consume_token(CELL);
            break;
          case CELLS:
            jj_consume_token(CELLS);
            break;
          default:
            jj_la1[52] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[53] = jj_gen;
          ;
        }
        s = Identifier();
                  {if (true) return new Cells(p, s);}
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_3_2() {
    if (jj_3R_8()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) return true;
    }
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_scan_token(STRING_END)) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_scan_token(CHARACTER)) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_9()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) return true;
    }
    return false;
  }

  public PsyScriptParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[55];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x40000,0x40000,0x80000,0x11000,0x11000,0x1000,0x1000,0x28000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x1800,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2006800,0x28000000,0x80000,0x80000,0x0,0x0,0x81800,0x801800,0x1000,0xfd8,0x1800,0x6800,0x1800,0x0,0x1800,0x6800,0x6800,0x400000,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x51c28841,0x20010000,0x20010000,0x100,0x100000,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x80,0x0,0x4000000,0x0,0x0,0x1000,0x6,0x0,0x10,0x0,0x0,0x0,0x8000000,0x0,0x51c28841,0x0,0x0,0x200008,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x26,0x6,0x6,0x6,0x6,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x8000000,0x8000000,0x0,0x8000000,0x82584,0x2,0x2,0x0,0x0,0x400000,0x60,0x400000,0x800000,0x800000,0x1000,0x1,0x19000000,0x10000,0x0,0x10000,0x200,0x10000,0x1004800,0x60,0x8000,0x18,0x260000,0x60,0x0,0x18000000,0x82584,0x0,0x0,0x0,0x0,0x19000000,0x19000000,0x0,0x0,0x9000000,0x8000000,0x19000000,0x11000000,0x19000000,0x18000000,0x18000000,0x0,0x1004800,0x0,0x0,0x0,0x1000000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public PsyScriptParser(CharStream stream) {
    token_source = new PsyScriptParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PsyScriptParser(PsyScriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(PsyScriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[93];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 55; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 93; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
